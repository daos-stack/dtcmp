Source: dtcmp
Maintainer: DAOS <daos@daos.io>
Uploaders: Brian J. Murrell <brian.murrell@intel.com>
Section: devel
Priority: optional
Build-Depends: debhelper-compat (= 12),
               liblwgrp-mpich-dev,
               libmpich-dev
Standards-Version: 4.4.1.0
Vcs-Browser: https://github.com/LLNL/dtcmp
Vcs-Git: https://github.com/LLNL/dtcmp.git
Homepage: https://github.com/LLNL/dtcmp.git

Package: libdtcmp0-mpich
Architecture: linux-any
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: The Datatype Comparison (DTCMP) Library provides pre-defined and
 user-defined comparison operations to compare the values of two items
 which can be arbitrary MPI datatypes. Using these comparison operations,
 the library provides various routines for manipulating data, which may
 be distributed over the processes of an MPI communicator including:
 search - search for a target value in an ordered list of values
 merge - combine multiple ordered lists into a single ordered list
 partition - divide a list of items into lower and higher values around a specified pivot value
 select - identify the kth largest value
 sort - sort data items into an ordered list
 rank - assign group ids and ranks to a list of items
 scan - execute a segmented scan on an ordered list of values
 The DTCMP library is designed to provide a high-level interface to the
 above functionality. These high-level routines will invoke various
 algorithm implementations to achieve the desired output. The goal of
 DTCMP is to be efficient given the input and the data distribution among
 processes. It is also intended to be portable to different platforms and
 to allow for easy addition of new algorithms over time.
 While performance is important, the goal is not to provide the fastest
 routines. The generality provided by the DTCMP API that makes
 portability possible also tends to reduce performance in some respects,
 e.g., forcing memory copies, abstracting some details about datatype,
 etc. Most likely a hand-tuned algorithm for the precise problem at hand
 will always be faster than DTCMP. However, DTCMP should be fast,
 efficient, and portable, so it will generally be a good option except
 for those cases where the application bottleneck demands absolute
 performance.
 .
 This package contains the shared libraries for use with MPICH2.

Package: libdtcmp-mpich-dev
Section: libdevel
Architecture: linux-any
Depends: libdtcmp0-mpich (= ${binary:Version}), ${misc:Depends}
Description: The Datatype Comparison (DTCMP) Library provides pre-defined and
 user-defined comparison operations to compare the values of two items
 which can be arbitrary MPI datatypes. Using these comparison operations,
 the library provides various routines for manipulating data, which may
 be distributed over the processes of an MPI communicator including:
 search - search for a target value in an ordered list of values
 merge - combine multiple ordered lists into a single ordered list
 partition - divide a list of items into lower and higher values around a specified pivot value
 select - identify the kth largest value
 sort - sort data items into an ordered list
 rank - assign group ids and ranks to a list of items
 scan - execute a segmented scan on an ordered list of values
 The DTCMP library is designed to provide a high-level interface to the
 above functionality. These high-level routines will invoke various
 algorithm implementations to achieve the desired output. The goal of
 DTCMP is to be efficient given the input and the data distribution among
 processes. It is also intended to be portable to different platforms and
 to allow for easy addition of new algorithms over time.
 While performance is important, the goal is not to provide the fastest
 routines. The generality provided by the DTCMP API that makes
 portability possible also tends to reduce performance in some respects,
 e.g., forcing memory copies, abstracting some details about datatype,
 etc. Most likely a hand-tuned algorithm for the precise problem at hand
 will always be faster than DTCMP. However, DTCMP should be fast,
 efficient, and portable, so it will generally be a good option except
 for those cases where the application bottleneck demands absolute
 performance.
 .
 This package is needed to compile programs against libdtcmp0-mpich.
 It contains the header files and links needed for compiling.
